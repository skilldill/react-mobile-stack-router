{"version":3,"sources":["example/screens/screens.module.css","../../src/MobileNavigation/MobileNavigation.context.ts","../../src/MobileNavigation/MobileNavigation.provider.tsx","../../src/MobileNavigation/MobileNavigation.hooks.ts","../../src/hooks/useTouch.ts","../../src/StackNavigation/ScreenAndroid.tsx","../../src/StackNavigation/ScreenIOS.tsx","../../src/StackNavigation/StackNavigation.tsx","../../src/StackNavigation/StackNavigation.utils.ts","../../src/StackNavigation/StackScreen.tsx","../../src/TabNavigation/Tab.tsx","../../src/TabNavigation/Tabs.tsx","example/screens/FirstScreen.tsx","example/screens/SecondScreen.tsx","example/screens/ThirdScreen.tsx","example/Navigation.tsx","example/ExampleApp.tsx","App.tsx","index.tsx"],"names":["module","exports","MobileNavigationContext","createContext","activeStack","stackMap","platform","params","setActiveStack","push","back","addStack","MobileNavigation","children","props","useState","setStackMap","setParams","values","stackName","prepareStacksMap","timeout","setTimeout","clearTimeout","name","state","inProcess","add","history","value","useStackNavigation","navigation","useContext","MobileNavigationService","useTouch","config","initialConfig","startX","startY","translateX","translateY","transition","stateStartX","setStateStartX","stateStartY","setStateStartY","stateTranslateX","setStateTranslateX","stateTranslateY","setStateTranslateY","stateTransition","setStateTransition","addTransitionAnimation","useCallback","transX","transY","delay","Promise","cb","resolve","promiseAnimation","handleTouchStart","event","clientX","clientY","handleTouchMove","diffY","handleTouchEnd","ScreenAndroid","index","closing","animated","onTouchStart","onTouchMove","onTouchEnd","className","cn","styles","style","zIndex","ScreenIOS","translated","Stack","useEffect","stackScreensMap","stack","createStackScreensMap","display","key","i","screen","StackScreen","React","Tab","Tabs","onChange","classTabbar","styleTabbar","active","setActive","classesTabbar","onClick","tabIndex","tab","FirstScreen","firstScreen","screenButton","id","SecondScreen","console","log","secondScreen","ThirdScreen","thirdScreen","Navigation","changeStack","title","titleActive","ExampleApp","App","ReactDOM","render","document","getElementById"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,OAAS,wBAAwB,aAAe,8BAA8B,YAAc,6BAA6B,aAAe,8BAA8B,YAAc,+B,mYCe/L,IAAMC,EACXC,wBAA4C,CAC1CC,iBAD0C,EAE1CC,SAF0C,GAG1CC,SAH0C,MAI1CC,YAJ0C,EAM1CC,eAAgB,aAChBC,KAAM,aACNC,KAAM,aACNC,SAAU,eClBDC,EAAiE,SAAC,GAG7E,IAAQC,EAAuBC,EAA/B,SAAkBR,EAAaQ,EAA/B,SAEA,EAAgCC,mBAAhC,IAAOV,EAAP,KAAiBW,EAAjB,KAGA,EAAsCD,qBAA/BX,EAAP,KAAoBI,EAApB,KACA,EAA4BO,qBAArBR,EAAP,KAAeU,EAAf,KAgDMC,EAAS,CACbd,YADa,EAEbC,SAFa,EAGbC,SAAU,GAHG,MAIbC,OAJa,EAMbC,eANa,EAObE,KAlCW,SAACS,GACZ,IAAMC,EAAmB,EAAH,GAAtB,GAEAA,aACEA,oBADFA,mBAGAJ,KAEA,IAAMK,EAAUC,YAAW,WACzB,IAAMF,EAAmB,EAAH,GAAtB,GACAA,mBACAJ,KACAO,kBAJF,MA2BAd,KAnBW,SAACU,EAAD,KACX,GAAYF,EAAZ,GAEA,IAAMG,EAAmB,EAAH,GAAtB,GACAA,kBAAyC,CACvCI,KADuC,EAEvCC,MAAO,SAETT,MAYAL,SAvDe,WACf,IAAIe,GAAJ,EAeA,OAbY,SAANC,EAAOH,GACX,MAME,OALAE,KACAV,GAAY,2CAAsC,CAAEY,QAAS,IAAjD,QACZ,GAAgBpB,EAAhB,QACAkB,MAIAC,MA2CMhB,IAGZ,OACE,kBAACT,EAAD,UAAkC2B,MAAOX,GAD3C,IC1EWY,EAAqB,SAACX,GACjC,IAAMY,EAAaC,qBAAnB,GAQA,MANgB,CACdvB,KAAM,qBACJsB,WADI,IAENrB,KAAM,kBAAMqB,OAAN,MAqBGE,EAA0B,SAACd,GACtC,IAAMY,EAAaC,qBAAnB,GAOA,YALgB,CACdvB,KAAM,mBAAkBsB,SAAlB,IACNrB,KAAM,kBAAMqB,OAAN,KAGR,CAGEzB,SAAUyB,EAHZ,SAIE1B,SAAU0B,EAJZ,SAKE3B,YAAa2B,EALf,YAMEpB,SAAUoB,EANZ,SAOEvB,eAAgBuB,EAAWvB,kB,wFCnClB0B,EAAW,SAACC,GACvB,IAAIC,EAAgB,CAClBC,OADkB,EAElBC,OAFkB,EAGlBC,WAHkB,EAIlBC,WAJkB,EAKlBC,YAAY,GAEd,IAAcL,EAAgB,EAAH,KAAbA,IACd,QAAQC,EAAR,SAAgBC,EAAhB,SAAwBC,EAAxB,aAAoCC,EAApC,aAAgDC,EAAhD,aAEA,EAAsC1B,mBAAtC,GAAO2B,EAAP,KAAoBC,EAApB,KACA,EAAsC5B,mBAAtC,GAAO6B,EAAP,KAAoBC,EAApB,KACA,EAA8C9B,mBAA9C,GAAO+B,EAAP,KAAwBC,EAAxB,KACA,EAA8ChC,mBAA9C,GAAOiC,EAAP,KAAwBC,EAAxB,KACA,EAA8ClC,mBAA9C,GAAOmC,EAAP,KAAwBC,EAAxB,KAEMC,EAAyBC,uBAC7B,uBAEEC,UAAiBf,QACjBgB,UAAiBf,QACjBgB,UAAQ,KAEiB,IAAIC,SAAwB,YACnDN,MACAF,KACAF,KAEA,GAAQW,IAER,IAAMrC,EAAUC,YAAW,WACzBqC,OADF,MAKFC,MAAsB,YACpBrC,gBACA4B,WArBN,IA4DA,MAAO,CACLU,iBAlCuBR,uBACvB,mBAAqB,YACnB,IACA,EADoBS,EAApB,QACA,GAAQC,EAAR,UAAiBC,EAAjB,UAEA,GAAQN,IAERf,KACAE,QAEF,CAACF,EAVH,IAmCEsB,gBAtBsBZ,uBACtB,mBAAqB,YACnB,IACA,EADoBS,EAApB,QACA,GAAQC,EAAR,UAGMG,EAHN,UAGA,EAEAnB,EAAmBD,GAHLiB,EAAd,IAIAd,EAAmBD,EAAnBC,GAEA,GAAQS,OAEV,CAAChB,EAAaE,EAAaG,EAb7B,IAuBEoB,eAPqB,SAACT,GAAD,OAAqB,WAC1C,GAAQA,MAORN,uBAJK,EAMLL,mBANK,EAOLE,mBAPK,EAQLE,mBARK,EAULR,eAVK,EAWLE,eAXK,EAaLH,YAbK,EAcLE,YAdK,EAeLE,gBAfK,EAgBLE,gBAhBK,EAiBLE,oBC1FSkB,EAA2D,SAAC,G,MAG/DvD,EAAkDC,EAA1D,SAAkBuD,EAAwCvD,EAA1D,MAAyBwD,EAAiCxD,EAA1D,QAAkCyD,EAAwBzD,EAA1D,SAA4CK,EAAcL,EAA1D,UAEMc,EAAUK,EAAhB,GACA,EAMIC,IALF2B,EADF,mBAEEI,EAFF,kBAGEE,EAHF,iBAIEzB,EAJF,cAKEI,EALF,kBAgBA,OACE,yBACE0B,aAAcX,IACdY,YAAaR,IACbS,WAAYP,GAZG,WAGbI,GAAY7B,EAAZ6B,KAFSzB,EAAb,GAEA,KACElB,YASA+C,UAAWC,KAAE,OACVC,IADU,IAEVA,GAFU,IAGVA,GAHU,MAKbC,MAAO,CAAEC,OAAQ,IAAOV,IAV5B,ICrBWW,EAAmD,SAAClE,G,MACvDD,EAA8DC,EAAtE,SAAkBuD,EAAoDvD,EAAtE,MAAyBwD,EAA6CxD,EAAtE,QAAkCmE,EAAoCnE,EAAtE,WAA8CyD,EAAwBzD,EAAtE,SAAwDK,EAAcL,EAAtE,UAEMc,EAAUK,EAAhB,GACA,EAMIC,IALF2B,EADF,mBAEEI,EAFF,kBAGEE,EAHF,iBAIEzB,EAJF,cAKEI,EALF,kBAgBA,OACE,yBACE0B,aAAcX,IACdY,YAAaR,IACbS,WAAYP,GAZG,WAGbI,GAAY7B,EAAZ6B,KAFSzB,EAAb,GAEA,KACElB,YASA+C,UAAWC,KAAE,OACVC,IADU,IAEVA,GAFU,IAGVA,GAHU,IAIVA,GAJU,MAMbC,MAAO,CAAEC,OAAQ,IAAOV,IAX5B,ICtBWa,EAA2C,SAACpE,GACvD,IAAQD,EAAmBC,EAA3B,SAAkBU,EAASV,EAA3B,KAEA,EACEmB,EADF,GAAQtB,EAAR,WAAkBP,EAAlB,cAA+BC,EAA/B,WAAyCC,EAAzC,WAGA6E,qBAAU,WACRxE,OADFwE,IAIA,IAAMC,ECvB6B,SAACvE,GACpC,IAAMuE,EAAN,GAMA,OAJAvE,OAAa,YACXuE,EAAgBC,QAAhBD,WAGF,EDgBwBE,CAAxB,GAEA,kBAAIhF,EAEA,yBACEqE,UAAWE,EACXC,MAAO,CAAES,QAASnF,cAAiC,SAEnD,qBAAee,UAAWK,EAAM6C,MAAO,GACnCxD,EALN,MAQG,KACGR,EADH,IAECA,oBAFD,GAGCA,EAAA,gBAA2B,qBACzB,qBACEc,UAAWK,EACX+C,UAAQ,EACRiB,IAAKC,EACLpB,MAAOoB,EACPnB,QAA0B,YAAjBoB,SAERN,EAAgBM,EARM,WAgBjC,yBACEf,UAAWE,EACXC,MAAO,CAAES,QAASnF,cAAiC,SAEnD,qBACEe,UAAWK,EACX6C,MAAO,EACPY,WACE5E,MACAA,oBADAA,GAGE,SADFA,aAAuBA,oBAAvBA,UAIAQ,EAdN,MAiBG,KACGR,EADH,IAECA,oBAFD,GAGCA,EAAA,gBAA2B,qBACzB,qBACEc,UAAWK,EACX+C,UAAQ,EACRiB,IAAKC,EACLpB,MAAOoB,EACPnB,QAA0B,YAAjBoB,QACTT,WACEQ,IAAMpF,oBAANoF,GAEa,SADbpF,aAAuBA,oBAAvBA,UAID+E,EAAgBM,EAbM,YEpEtBC,EAAuD,SAAC,GAAD,IAClE9E,EADkE,kBAE9D+E,kBAACA,IAADA,cAF8D,I,4CCGvDC,EAAuC,SAAC/E,GACnD,IAAQD,EAAaC,EAArB,SACA,OAAO,yBAAK6D,UAAWE,GAAvB,ICCWiB,EAAyC,SAAChF,GACrD,IAAQD,EAAiDC,EAAzD,SAAkBiF,EAAuCjF,EAAzD,SAA4BkF,EAA6BlF,EAAzD,YAAyCmF,EAAgBnF,EAAzD,YAEA,EAA4BC,mBAA5B,GAAOmF,EAAP,KAAeC,EAAf,KAOMC,EAAgB,EAClBxB,IAAG,CAACC,EADc,IAElBA,EAEJ,OACE,yBAAKF,UAAWE,GACZhE,EADJ,GAEE,yBAAK8D,UAAWyB,EAAetB,MAAOmB,GACpC,yBAAKtB,UAAWE,GACZhE,EAAA,KAAuB,qBACvB,yBAAK2E,IAAKC,EAAGY,QAAS,kBAfPC,EAe6Bb,EAf9B,EAeiCc,QAAzB,KAd9BJ,UACA,GAAcJ,EAAd,IAFsB,IAACO,EAAD,IAgBXb,MAAec,QAAfd,YAAuCc,QAFnB,c,gBCxBtBC,EAA+B,SAAC,GAAmB,IAAjBrF,EAAgB,EAAhBA,UACvCS,EAAUE,EAAmBX,GAMnC,OACE,yBAAKwD,UAAWC,IAAG,CAACC,IAAOa,OAAQb,IAAO4B,eACxC,4BAAQ9B,UAAWE,IAAO6B,aAAcL,QANxB,WAClBzE,EAAQnB,KAAK,WAAY,CAAEkG,GAAI,MAK7B,mBCTOC,EAAgC,SAAC,GAAmB,IAAjBzF,EAAgB,EAAhBA,UACxCS,EAAUE,EAAmBX,GAC3BwF,EVOW3E,qBAAnB,GACA,OURQ2E,GAERxB,qBAAU,WACR0B,QAAQC,IAAIH,KACX,CAACA,IAMJ,OACE,yBAAKhC,UAAWC,IAAG,CAACC,IAAOa,OAAQb,IAAOkC,gBACxC,4BAAQpC,UAAWE,IAAO6B,aAAcL,QANxB,WAClBzE,EAAQnB,KAAK,aAKX,kBCdOuG,EAA+B,SAAC,GAAmB,IAAjB7F,EAAgB,EAAhBA,UACvCS,EAAUE,EAAmBX,GAEnC,OACE,yBAAKwD,UAAWC,IAAG,CAACC,IAAOa,OAAQb,IAAOoC,eACxC,4BAAQtC,UAAWE,IAAO6B,aAAcL,QAASzE,EAAQlB,MAAzD,UCAOwG,EAAa,WACxB,IAAQC,EZWD,CAAEA,YAHUnF,qBAAnB,GACA,gBYTQmF,YAER,OACE,kBAAC,EAAD,CAAMpB,SAAUoB,GACd,kBAAC,EAAD,CAAK3F,KAAK,aAAa4F,MAAM,QAAQC,YAAY,SAC/C,kBAAC,EAAD,CAAO7F,KAAK,aAAagE,IAAI,cAC3B,kBAAC,EAAD,CAAahE,KAAK,QAChB,kBAAC,EAAD,CAAaL,UAAU,gBAGzB,kBAAC,EAAD,CAAaK,KAAK,YAChB,kBAAC,EAAD,CAAcL,UAAU,gBAG1B,kBAAC,EAAD,CAAaK,KAAK,WAChB,kBAAC,EAAD,CAAaL,UAAU,kBAK7B,kBAAC,EAAD,CAAKK,KAAK,cAAc4F,MAAM,SAASC,YAAY,UACjD,kBAAC,EAAD,CAAO7F,KAAK,cAAcgE,IAAI,eAC5B,kBAAC,EAAD,CAAahE,KAAK,QAChB,kBAAC,EAAD,CAAaL,UAAU,iBAGzB,kBAAC,EAAD,CAAaK,KAAK,YAChB,kBAAC,EAAD,CAAcL,UAAU,iBAG1B,kBAAC,EAAD,CAAaK,KAAK,WAChB,kBAAC,EAAD,CAAaL,UAAU,qBCvCtBmG,EAAa,WACxB,OACE,kBAAC,EAAD,CAAkBhH,SAAS,OACzB,kBAAC,EAAD,QCCSiH,EAJH,WACV,OAAO,kBAAC,EAAD,OCATC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ce75c4d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"screen\":\"screens_screen__36rK9\",\"screenButton\":\"screens_screenButton__Is7y6\",\"firstScreen\":\"screens_firstScreen__2oXBh\",\"secondScreen\":\"screens_secondScreen__1cmue\",\"thirdScreen\":\"screens_thirdScreen__2Ep1E\"};","import { createContext } from 'react';\n\ninterface MobileNavigationContextModel {\n  activeStack: string | undefined;\n  stackMap: {\n    [key: string]: { history: { name: string; state: 'show' | 'closing' }[] };\n  };\n  platform: 'android' | 'ios';\n  params: any;\n\n  setActiveStack: (stackName: string) => void;\n  push: (stackName: string, name: string, params?: any) => void;\n  back: (stackName: string) => void;\n  addStack: (name: string) => void;\n}\n\nexport const MobileNavigationContext =\n  createContext<MobileNavigationContextModel>({\n    activeStack: undefined,\n    stackMap: {},\n    platform: 'ios',\n    params: undefined,\n\n    setActiveStack: () => {},\n    push: () => {},\n    back: () => {},\n    addStack: () => {},\n  });\n","import React, { FC, PropsWithChildren, useState } from 'react';\n\nimport { MobileNavigationContext } from './MobileNavigation.context';\n\ninterface MobileNavigationModel {\n  platform?: 'android' | 'ios';\n}\n\nexport const MobileNavigation: FC<PropsWithChildren<MobileNavigationModel>> = (\n  props,\n) => {\n  const { children, platform } = props;\n\n  const [stackMap, setStackMap] = useState<{\n    [key: string]: { history: { name: string; state: 'show' | 'closing' }[] };\n  }>({});\n  const [activeStack, setActiveStack] = useState<string>();\n  const [params, setParams] = useState<any>();\n\n  const addStack = () => {\n    let inProcess = false;\n\n    const add = (name: string) => {\n      if (!inProcess) {\n        inProcess = true;\n        setStackMap((stackMap) => ({ ...stackMap, [name]: { history: [] } }));\n        !activeStack && setActiveStack(name);\n        inProcess = false;\n\n        return;\n      } else {\n        add(name);\n      }\n    };\n\n    return add;\n  };\n\n  const back = (stackName: string) => {\n    const prepareStacksMap = { ...stackMap };\n\n    prepareStacksMap[stackName].history[\n      prepareStacksMap[stackName].history.length - 1\n    ].state = 'closing';\n    setStackMap(prepareStacksMap);\n\n    const timeout = setTimeout(() => {\n      const prepareStacksMap = { ...stackMap };\n      prepareStacksMap[stackName].history.pop();\n      setStackMap(prepareStacksMap);\n      clearTimeout(timeout);\n    }, 200);\n  };\n\n  const push = (stackName: string, screenName: string, params?: any) => {\n    !!params && setParams(params);\n\n    const prepareStacksMap = { ...stackMap };\n    prepareStacksMap[stackName].history.push({\n      name: screenName,\n      state: 'show',\n    });\n    setStackMap(prepareStacksMap);\n  };\n\n  const values = {\n    activeStack,\n    stackMap,\n    platform: !!platform ? platform : 'ios',\n    params,\n\n    setActiveStack,\n    back,\n    push,\n    addStack: addStack(),\n  };\n\n  return (\n    <MobileNavigationContext.Provider value={values}>\n      {children}\n    </MobileNavigationContext.Provider>\n  );\n};\n","import { useContext } from 'react';\nimport { MobileNavigationContext } from './MobileNavigation.context';\n\nexport const useStackNavigation = (stackName: string) => {\n  const navigation = useContext(MobileNavigationContext);\n\n  const history = {\n    push: (name: string, params?: any) =>\n      navigation.push(stackName, name, params),\n    back: () => navigation.back(stackName),\n  };\n\n  return history;\n};\n\nexport const useStackParams = <T = any>() => {\n  const navigation = useContext(MobileNavigationContext);\n  return navigation.params as T;\n};\n\nexport const useMobileNavigation = () => {\n  const navigation = useContext(MobileNavigationContext);\n  const changeStack = navigation.setActiveStack;\n\n  return { changeStack };\n};\n\n/**\n * For inner use\n */\nexport const MobileNavigationService = (stackName: string) => {\n  const navigation = useContext(MobileNavigationContext);\n\n  const history = {\n    push: (name: string) => navigation.push(stackName, name),\n    back: () => navigation.back(stackName),\n  };\n\n  return {\n    ...history,\n\n    platform: navigation.platform,\n    stackMap: navigation.stackMap,\n    activeStack: navigation.activeStack,\n    addStack: navigation.addStack,\n    setActiveStack: navigation.setActiveStack,\n  };\n};\n","import { useState, useCallback, TouchEvent } from 'react';\n\ninterface useTouchConfig {\n  startX?: number;\n  startY?: number;\n  translateX?: number;\n  translateY?: number;\n  transition?: boolean;\n}\n\nexport const useTouch = (config?: useTouchConfig) => {\n  let initialConfig = {\n    startX: 0,\n    startY: 0,\n    translateX: 0,\n    translateY: 0,\n    transition: false,\n  };\n  if (!!config) initialConfig = { ...initialConfig, ...config };\n  const { startX, startY, translateX, translateY, transition } = initialConfig;\n\n  const [stateStartX, setStateStartX] = useState(startX);\n  const [stateStartY, setStateStartY] = useState(startY);\n  const [stateTranslateX, setStateTranslateX] = useState(translateX);\n  const [stateTranslateY, setStateTranslateY] = useState(translateY);\n  const [stateTransition, setStateTransition] = useState(transition);\n\n  const addTransitionAnimation = useCallback(\n    (\n      cb?: () => void,\n      transX: number = translateX,\n      transY: number = translateY,\n      delay = 400,\n    ) => {\n      const promiseAnimation = new Promise<NodeJS.Timeout>((resolve) => {\n        setStateTransition(true);\n        setStateTranslateY(transY);\n        setStateTranslateX(transX);\n\n        !!cb && cb();\n\n        const timeout = setTimeout(() => {\n          resolve(timeout);\n        }, delay);\n      });\n\n      promiseAnimation.then((timeout) => {\n        clearTimeout(timeout);\n        setStateTransition(false);\n      });\n    },\n    [],\n  );\n\n  const handleTouchStart = useCallback(\n    (cb?: () => void) => (event: TouchEvent) => {\n      const { touches } = event;\n      const { clientX, clientY } = touches[0];\n\n      !!cb && cb();\n\n      setStateStartX(clientX);\n      setStateStartY(clientY);\n    },\n    [setStateStartX, setStateStartY],\n  );\n\n  const handleTouchMove = useCallback(\n    (cb?: () => void) => (event: TouchEvent) => {\n      const { touches } = event;\n      const { clientX, clientY } = touches[0];\n\n      const diffX = clientX - stateStartX;\n      const diffY = clientY - stateStartY;\n\n      setStateTranslateX(stateTranslateX + diffX);\n      setStateTranslateY(stateTranslateY + diffY);\n\n      !!cb && cb();\n    },\n    [stateStartX, stateStartY, setStateTranslateX, setStateTranslateY],\n  );\n\n  const handleTouchEnd = (cb?: () => void) => () => {\n    !!cb && cb();\n  };\n\n  return {\n    handleTouchStart,\n    handleTouchMove,\n    handleTouchEnd,\n    addTransitionAnimation,\n\n    setStateTranslateX,\n    setStateTranslateY,\n    setStateTransition,\n\n    setStateStartX,\n    setStateStartY,\n\n    stateStartX,\n    stateStartY,\n    stateTranslateX,\n    stateTranslateY,\n    stateTransition,\n  };\n};\n","import React, { FC, PropsWithChildren } from 'react';\nimport cn from 'classnames';\n\nimport styles from './StackNavigation.module.css';\nimport { useTouch } from '../hooks';\nimport { MobileNavigationService } from '../MobileNavigation';\n\ninterface ScreenAndroidProps {\n  index: number;\n  stackName: string;\n  closing?: boolean;\n  animated?: boolean;\n}\n\nexport const ScreenAndroid: FC<PropsWithChildren<ScreenAndroidProps>> = (\n  props,\n) => {\n  const { children, index, closing, animated, stackName } = props;\n\n  const history = MobileNavigationService(stackName);\n  const {\n    handleTouchStart,\n    handleTouchMove,\n    handleTouchEnd,\n    stateStartX,\n    stateTranslateX,\n  } = useTouch();\n\n  const onTouchEnd = () => {\n    const diff = stateTranslateX - stateStartX;\n\n    if (animated && stateStartX < 100 && diff >= 100) {\n      history.back();\n    }\n  };\n\n  return (\n    <div\n      onTouchStart={handleTouchStart()}\n      onTouchMove={handleTouchMove()}\n      onTouchEnd={handleTouchEnd(onTouchEnd)}\n      className={cn({\n        [styles.screenAndroid]: true,\n        [styles.screenAndroidAnimated]: animated,\n        [styles.screenAndroidClose]: closing,\n      })}\n      style={{ zIndex: 1000 + index }}\n    >\n      {children}\n    </div>\n  );\n};\n","import React, { FC, PropsWithChildren } from 'react';\nimport cn from 'classnames';\n\nimport styles from './StackNavigation.module.css';\nimport { useTouch } from '../hooks';\nimport { MobileNavigationService } from '../MobileNavigation';\n\ninterface ScreenIOSProps {\n  index: number;\n  stackName: string;\n  closing?: boolean;\n  translated?: boolean;\n  animated?: boolean;\n}\n\nexport const ScreenIOS: FC<PropsWithChildren<ScreenIOSProps>> = (props) => {\n  const { children, index, closing, translated, animated, stackName } = props;\n\n  const history = MobileNavigationService(stackName);\n  const {\n    handleTouchStart,\n    handleTouchMove,\n    handleTouchEnd,\n    stateStartX,\n    stateTranslateX,\n  } = useTouch();\n\n  const onTouchEnd = () => {\n    const diff = stateTranslateX - stateStartX;\n\n    if (animated && stateStartX < 100 && diff >= 100) {\n      history.back();\n    }\n  };\n\n  return (\n    <div\n      onTouchStart={handleTouchStart()}\n      onTouchMove={handleTouchMove()}\n      onTouchEnd={handleTouchEnd(onTouchEnd)}\n      className={cn({\n        [styles.screenIOS]: true,\n        [styles.screenIOSanimated]: animated,\n        [styles.screenIOSclose]: closing,\n        [styles.screenIOStranslated]: translated,\n      })}\n      style={{ zIndex: 1000 + index }}\n    >\n      {children}\n    </div>\n  );\n};\n","import React, { FC, PropsWithChildren, useEffect } from 'react';\nimport { MobileNavigationService } from '../MobileNavigation';\n\nimport { ScreenAndroid } from './ScreenAndroid';\nimport { ScreenIOS } from './ScreenIOS';\n\nimport styles from './StackNavigation.module.css';\nimport { createStackScreensMap } from './StackNavigation.utils';\n\ninterface StackProps {\n  name: string;\n}\n\nexport const Stack: FC<PropsWithChildren<StackProps>> = (props) => {\n  const { children, name } = props;\n\n  const { addStack, activeStack, stackMap, platform } =\n    MobileNavigationService(name);\n\n  useEffect(() => {\n    addStack(name);\n  }, []);\n\n  const stackScreensMap = createStackScreensMap(children);\n\n  if (platform === 'android') {\n    return (\n      <div\n        className={styles.stackNavigation}\n        style={{ display: activeStack === name ? 'block' : 'none' }}\n      >\n        <ScreenAndroid stackName={name} index={0}>\n          {(children as any[])[0]}\n        </ScreenAndroid>\n\n        {!!stackMap &&\n          !!stackMap[name] &&\n          stackMap[name].history.length > 0 &&\n          stackMap[name].history.map((screen, i) => (\n            <ScreenAndroid\n              stackName={name}\n              animated\n              key={i}\n              index={i}\n              closing={screen.state === 'closing'}\n            >\n              {stackScreensMap[screen.name]}\n            </ScreenAndroid>\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.stackNavigation}\n      style={{ display: activeStack === name ? 'block' : 'none' }}\n    >\n      <ScreenIOS\n        stackName={name}\n        index={0}\n        translated={\n          stackMap[name] &&\n          stackMap[name].history.length > 0 &&\n          stackMap[name].history[stackMap[name].history.length - 1].state ===\n            'show'\n        }\n      >\n        {(children as any[])[0]}\n      </ScreenIOS>\n\n      {!!stackMap &&\n        !!stackMap[name] &&\n        stackMap[name].history.length > 0 &&\n        stackMap[name].history.map((screen, i) => (\n          <ScreenIOS\n            stackName={name}\n            animated\n            key={i}\n            index={i}\n            closing={screen.state === 'closing'}\n            translated={\n              i !== stackMap[name].history.length - 1 &&\n              stackMap[name].history[stackMap[name].history.length - 1]\n                .state === 'show'\n            }\n          >\n            {stackScreensMap[screen.name]}\n          </ScreenIOS>\n        ))}\n    </div>\n  );\n};\n","export const createStackScreensMap = (children: any) => {\n  const stackScreensMap: { [key: string]: any } = {};\n\n  children.map((stack: any) => {\n    stackScreensMap[stack.props.name] = stack;\n  });\n\n  return stackScreensMap;\n};\n","import React, { FC, PropsWithChildren } from 'react';\n\ninterface StackScreenProps {\n  name: string;\n}\n\nexport const StackScreen: FC<PropsWithChildren<StackScreenProps>> = ({\n  children,\n}) => <React.Fragment>{children}</React.Fragment>;\n","import React, { FC, PropsWithChildren } from 'react';\nimport styles from './TabNavigation.module.css';\n\ninterface TabProps {\n  name: string;\n  title: React.ReactNode;\n  titleActive: React.ReactNode;\n}\n\nexport const Tab: FC<PropsWithChildren<TabProps>> = (props) => {\n  const { children } = props;\n  return <div className={styles.tab}>{children}</div>;\n};\n","import React, { CSSProperties, FC, PropsWithChildren, useState } from 'react';\nimport cn from 'classnames';\n\nimport styles from './TabNavigation.module.css';\n\ninterface TabsProps {\n  onChange?: (tabName: string) => void;\n\n  classTabbar?: string;\n  styleTabbar?: CSSProperties;\n}\n\nexport const Tabs: FC<PropsWithChildren<TabsProps>> = (props) => {\n  const { children, onChange, classTabbar, styleTabbar } = props;\n\n  const [active, setActive] = useState(0);\n\n  const handleChangeTab = (tabIndex: number, tabName: string) => {\n    setActive(tabIndex);\n    !!onChange && onChange(tabName);\n  };\n\n  const classesTabbar = !!classTabbar\n    ? cn([styles.tabbar, classTabbar])\n    : styles.tabbar;\n\n  return (\n    <div className={styles.tabs}>\n      {(children as any[])[active]}\n      <div className={classesTabbar} style={styleTabbar}>\n        <div className={styles.tabbarContent}>\n          {(children as any[]).map((tab, i) => (\n            <div key={i} onClick={() => handleChangeTab(i, tab.props.name)}>\n              {i === active ? tab.props.titleActive : tab.props.title}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { useStackNavigation } from 'react-mobile-stack-router';\nimport cn from 'classnames';\n\nimport { ScreenProps } from './Screen.model';\nimport styles from './screens.module.css';\n\nexport const FirstScreen: FC<ScreenProps> = ({ stackName }) => {\n  const history = useStackNavigation(stackName);\n\n  const handleClick = () => {\n    history.push('settings', { id: 1 });\n  };\n\n  return (\n    <div className={cn([styles.screen, styles.firstScreen])}>\n      <button className={styles.screenButton} onClick={handleClick}>\n        Second screen\n      </button>\n    </div>\n  );\n};\n","import React, { FC, useEffect } from 'react';\nimport { useStackNavigation, useStackParams } from 'react-mobile-stack-router';\nimport cn from 'classnames';\n\nimport { ScreenProps } from './Screen.model';\nimport styles from './screens.module.css';\n\nexport const SecondScreen: FC<ScreenProps> = ({ stackName }) => {\n  const history = useStackNavigation(stackName);\n  const { id } = useStackParams<{ id: number }>();\n\n  useEffect(() => {\n    console.log(id);\n  }, [id]);\n\n  const handleClick = () => {\n    history.push('profile');\n  };\n\n  return (\n    <div className={cn([styles.screen, styles.secondScreen])}>\n      <button className={styles.screenButton} onClick={handleClick}>\n        Thrid screen\n      </button>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { useStackNavigation } from 'react-mobile-stack-router';\nimport cn from 'classnames';\n\nimport { ScreenProps } from './Screen.model';\nimport styles from './screens.module.css';\n\nexport const ThirdScreen: FC<ScreenProps> = ({ stackName }) => {\n  const history = useStackNavigation(stackName);\n\n  return (\n    <div className={cn([styles.screen, styles.thirdScreen])}>\n      <button className={styles.screenButton} onClick={history.back}>\n        Back\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport {\n  useMobileNavigation,\n  Tabs,\n  Tab,\n  Stack,\n  StackScreen,\n} from 'react-mobile-stack-router';\n\nimport { FirstScreen, SecondScreen, ThirdScreen } from './screens';\n\nexport const Navigation = () => {\n  const { changeStack } = useMobileNavigation();\n\n  return (\n    <Tabs onChange={changeStack}>\n      <Tab name='firstStack' title='First' titleActive='FIRST'>\n        <Stack name='firstStack' key='firstStack'>\n          <StackScreen name='home'>\n            <FirstScreen stackName='firstStack' />\n          </StackScreen>\n\n          <StackScreen name='settings'>\n            <SecondScreen stackName='firstStack' />\n          </StackScreen>\n\n          <StackScreen name='profile'>\n            <ThirdScreen stackName='firstStack' />\n          </StackScreen>\n        </Stack>\n      </Tab>\n\n      <Tab name='secondStack' title='Second' titleActive='SECOND'>\n        <Stack name='secondStack' key='secondStack'>\n          <StackScreen name='home'>\n            <FirstScreen stackName='secondStack' />\n          </StackScreen>\n\n          <StackScreen name='settings'>\n            <SecondScreen stackName='secondStack' />\n          </StackScreen>\n\n          <StackScreen name='profile'>\n            <ThirdScreen stackName='secondStack' />\n          </StackScreen>\n        </Stack>\n      </Tab>\n    </Tabs>\n  );\n};\n","import React from 'react';\nimport { MobileNavigation } from 'react-mobile-stack-router';\n\nimport { Navigation } from './Navigation';\n\nexport const ExampleApp = () => {\n  return (\n    <MobileNavigation platform='ios'>\n      <Navigation />\n    </MobileNavigation>\n  );\n};\n","import React from 'react';\n\nimport 'react-mobile-stack-router/dist/index.css';\nimport { ExampleApp } from './example';\n\nconst App = () => {\n  return <ExampleApp />;\n};\n\nexport default App;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}